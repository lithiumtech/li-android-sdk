/*
 * Copyright 2018 Lithium Technologies Pvt Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'checkstyle'

Properties properties = new Properties()

def propertiesFile = file("${rootDir}/local.properties")
if (propertiesFile.canRead()) {
    properties.load(new FileInputStream(propertiesFile))
}

siteUrl = project.ext.siteUrl
gitUrl = project.ext.gitUrl

version = project.ext.versionName
group = project.ext.groupId

def artifactId = 'lia-core'

def localReleaseDest = "${buildDir}/release/${project.ext.versionName}"

android {

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName
    }

    buildTypes {

        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }

        snapshot {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }

        dev {
            initWith debug
        }
    }

    libraryVariants.all { variant ->
        def flavor = variant.mergedFlavor
        def versionCode = flavor.versionCode
        def versionName = flavor.versionName
        if (variant.buildType.isDebuggable()) {
            versionCode += 1
        }
        flavor.versionCode = versionCode
        flavor.versionName = versionName

        variant.resValue "string", "li_sdk_core_version", "${versionName}"
        variant.buildConfigField "String", "LI_SDK_CORE_VERSION", "\"${versionName}\""
    }

    lintOptions {
        abortOnError false
    }
}

unMock {
    keep "android.widget.BaseAdapter"
    keep "android.widget.ArrayAdapter"
    keep "android.os.Bundle"
    keep "android.database.AbstractCursor"
    keep "android.database.CrossProcessCursor"
    keep "android.location.Location"
    keep "android.net.Uri"
    keep "javax.net.ssl"
    keepStartingWith "android.database.MatrixCursor"
    keepStartingWith "android.text.TextUtils"
    keepStartingWith "android.util."
    keepStartingWith "android.text."
    keepStartingWith "android.content.ContentValues"
    keepStartingWith "android.content.ComponentName"
    keepStartingWith "android.content.ContentUris"
    keepStartingWith "android.content.ContentProviderOperation"
    keepStartingWith "android.content.ContentProviderResult"
    keepStartingWith "android.content.UriMatcher"
    keepStartingWith "android.content.Intent"
    keepStartingWith "android.content.res.Configuration"
    keepStartingWith "org."
    keepStartingWith "libcore."
    keepStartingWith "com.android.internal.R"
    keepStartingWith "com.android.internal.util."
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:$project.ext.supportLibraryVersion"
    implementation "com.android.support:support-v4:$project.ext.supportLibraryVersion"
    implementation "com.android.support:design:$project.ext.supportLibraryVersion"
    implementation "com.google.firebase:firebase-messaging:$project.ext.firebaseMessagingVersion"
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation "com.squareup.okhttp3:okhttp:$project.ext.okhttpVersion"

    // Dependencies for local unit tests
    testImplementation 'junit:junit:4.12'
    testImplementation "junit:junit:$project.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$project.ext.mockitoVersion"
    testImplementation "org.mockito:mockito-all:$project.ext.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$project.ext.powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$project.ext.powerMockito"
    testImplementation "com.squareup.okhttp3:mockwebserver:$project.ext.okhttpVersion"
    testImplementation "com.squareup.assertj:assertj-android:$project.ext.assertjAndroidVersion"
}

preBuild.dependsOn('checkstyle')
assemble.dependsOn('lint')
check.dependsOn('checkstyle')

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    failOnError false
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task uploadArchivesLocally(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        mavenDeployer {
            pom.groupId = groupId
            pom.artifactId = artifactId
            pom.version = versionName
            repository(url: mavenLocal().url)
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = versionName
        repository(url: "file://${localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "${artifactId}-${versionName}.zip"
}

task generateRelease {
    println "Release ${versionName} can be found at ${localReleaseDest}/"
    println "Release ${versionName} zipped can be found ${buildDir}/release-${versionName}.zip"
}

uploadArchives.doLast {generateRelease}
zipRelease.doLast {generateRelease}
javadoc.doLast {generateRelease}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name artifactId
                version versionName
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = repositoryName
        name = artifactId
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}