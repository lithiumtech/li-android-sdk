/*
 * Copyright 2018 Lithium Technologies Pvt Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'checkstyle'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

project.ext.set('groupId', 'lithium.community.android.sdk')
project.ext.set('artifactId', 'li-android-sdk-core')

project.ext.set('versionCode', 126006) // `major` + `minor` + `revision` + `build` (must have leading zeros up to 1000)
project.ext.set('versionName', '1.2.6-SNAPSHOT')

project.ext.set('repositoryName', 'li-android-sdk')
project.ext.set('localReleaseDest', "${buildDir}/release/${project.ext.versionName}")

project.ext.set('siteUrl', 'https://github.com/lithiumtech/li-android-sdk-core')
project.ext.set('gitUrl', 'https://github.com/lithiumtech/li-android-sdk-core.git')

version = project.ext.versionName
group = project.ext.groupId

android {

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.versionCode
        versionName project.ext.versionName
    }

    buildTypes {
        buildTypes.each {
            it.resValue "string", "li_sdk_core_version", "${project.ext.versionName}"
            it.buildConfigField "String", "LI_SDK_CORE_VERSION", "\"${project.ext.versionName}\""
        }

        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

unMock {
    keep "android.widget.BaseAdapter"
    keep "android.widget.ArrayAdapter"
    keep "android.os.Bundle"
    keep "android.database.AbstractCursor"
    keep "android.database.CrossProcessCursor"
    keep "android.location.Location"
    keep "android.net.Uri"
    keep "javax.net.ssl"
    keepStartingWith "android.database.MatrixCursor"
    keepStartingWith "android.text.TextUtils"
    keepStartingWith "android.util."
    keepStartingWith "android.text."
    keepStartingWith "android.content.ContentValues"
    keepStartingWith "android.content.ComponentName"
    keepStartingWith "android.content.ContentUris"
    keepStartingWith "android.content.ContentProviderOperation"
    keepStartingWith "android.content.ContentProviderResult"
    keepStartingWith "android.content.UriMatcher"
    keepStartingWith "android.content.Intent"
    keepStartingWith "android.content.res.Configuration"
    keepStartingWith "org."
    keepStartingWith "libcore."
    keepStartingWith "com.android.internal.R"
    keepStartingWith "com.android.internal.util."
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$project.ext.supportLibraryVersion"
    /* support v4 added to avoid miss matches from firebase-messaging:11.8.0 dependencies */
    compile "com.android.support:support-v4:$project.ext.supportLibraryVersion"
    compile "com.google.code.gson:gson:$project.ext.gsonVersion"
    compile "com.squareup.okhttp3:okhttp:$project.ext.okhttpVersion"
    compile "com.google.firebase:firebase-messaging:$project.ext.firebaseMessagingVersion"

    // Dependencies for local unit tests
    testCompile 'junit:junit:4.12'
    testCompile "junit:junit:$project.ext.junitVersion"
    testCompile "org.mockito:mockito-core:$project.ext.mockitoVersion"
    testCompile "org.mockito:mockito-all:$project.ext.mockitoVersion"
    testCompile "org.powermock:powermock-module-junit4:$project.ext.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$project.ext.powerMockito"
    testCompile "com.squareup.okhttp3:mockwebserver:$project.ext.okhttpVersion"
    testCompile "com.squareup.assertj:assertj-android:$project.ext.assertjAndroidVersion"
}

preBuild.dependsOn('checkstyle')
assemble.dependsOn('lint')
check.dependsOn('checkstyle')

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    failOnError false
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task uploadLocalArchives(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().url)
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = project.ext.groupId
        pom.artifactId = project.ext.artifactId
        pom.version = project.ext.versionName
        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${project.ext.localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from project.ext.localReleaseDest
    destinationDir buildDir
    archiveName "${project.ext.artifactId}-${project.ext.versionName}.zip"
}

task generateRelease << {
    println "Release ${project.ext.versionName} can be found at ${project.ext.localReleaseDest}/"
    println "Release ${project.ext.versionName} zipped can be found ${buildDir}/release-${project.ext.versionName}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)
generateRelease.dependsOn(javadoc)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name project.ext.artifactId
                url project.ext.siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection project.ext.gitUrl
                    developerConnection project.ext.gitUrl
                    url project.ext.siteUrl
                }
            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = project.ext.repositoryName
        name = project.ext.artifactId
        websiteUrl = project.ext.siteUrl
        vcsUrl = project.ext.gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}