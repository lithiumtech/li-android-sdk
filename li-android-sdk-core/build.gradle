apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'de.mobilej.unmock'
apply plugin: 'jacoco'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'checkstyle'
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group = 'lithium.community.android.sdk'
version = '1.2.5'
def artifactId = 'li-android-sdk-core'
def localReleaseDest = "${buildDir}/release/${version}"
def repositoryName = 'li-android-sdk'

android {

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 3
        versionName "${version}"
    }

    buildTypes {
        buildTypes.each {
            it.resValue "string", "li_sdk_core_version", "${version}"
            it.buildConfigField "String", "li_sdk_core_version", "\"${version}\""
        }

        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

unMock {
    keep "android.widget.BaseAdapter"
    keep "android.widget.ArrayAdapter"
    keep "android.os.Bundle"
    keep "android.database.AbstractCursor"
    keep "android.database.CrossProcessCursor"
    keep "android.location.Location"
    keep "android.net.Uri"
    keepStartingWith "android.database.MatrixCursor"
    keepStartingWith "android.text.TextUtils"
    keepStartingWith "android.util."
    keepStartingWith "android.text."
    keepStartingWith "android.content.ContentValues"
    keepStartingWith "android.content.ComponentName"
    keepStartingWith "android.content.ContentUris"
    keepStartingWith "android.content.ContentProviderOperation"
    keepStartingWith "android.content.ContentProviderResult"
    keepStartingWith "android.content.UriMatcher"
    keepStartingWith "android.content.Intent"
    keepStartingWith "android.content.res.Configuration"
    keepStartingWith "org."
    keepStartingWith "libcore."
    keepStartingWith "com.android.internal.R"
    keepStartingWith "com.android.internal.util."
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.google.firebase:firebase-messaging:11.0.2'

    // Dependencies for local unit tests
    testCompile 'junit:junit:4.12'
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"
    testCompile 'com.squareup.assertj:assertj-android:1.1.1'
}

preBuild.dependsOn('checkstyle')
assemble.dependsOn('lint')
check.dependsOn('checkstyle')

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    failOnError false
}

task androidJavadocs(type: Javadoc) {
    failOnError = false
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../docs/")
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: [javadoc, androidJavadocs]) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task uploadLocalArchives(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().url)
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = "lithium.community.android.sdk"
        pom.artifactId = "li-android-sdk-core"
        pom.version = "1.2.5"
        // Add other pom properties here if you want (developer details / licenses)
        repository(url: "file://${localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "${artifactId}-${version}.zip"
}

task generateRelease << {
    println "Release ${version} can be found at ${localReleaseDest}/"
    println "Release ${version} zipped can be found ${buildDir}/release-${version}.zip"
}

generateRelease.dependsOn(uploadArchives)
generateRelease.dependsOn(zipRelease)
generateRelease.dependsOn(javadoc)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

def siteUrl = 'https://github.com/lithiumtech/li-android-sdk-core'      // Homepage URL of the library
def gitUrl = 'https://github.com/lithiumtech/li-android-sdk-core.git'   // Git repository URL

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name 'li-android-sdk-core'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "${repositoryName}"
        name = "${artifactId}"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}